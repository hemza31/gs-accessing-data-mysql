package com.laribi.easycots.controllers;

import com.laribi.easycots.models.Product;
import com.laribi.easycots.repositories.ProductRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/easycots") // This means URL's start with /demo (after Application path)
public class ProductController {

	@Autowired // This means to get the bean called productRepository
// Which is auto-generated by Spring, we will use it to handle the data
private ProductRepository productRepository;

	@PostMapping(path="/Product") // Map ONLY POST Requests
	public @ResponseBody String addNewProduct (@RequestParam String productName
			, @RequestParam String projectLeader, @RequestParam String productCreatedOn, @RequestParam String productUrl) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Product n = new Product();
		n.setProductName(n.getProductName());
		n.setProjectLeader(n.getProjectLeader());
		n.setProductCreatedOn(n.getProductCreatedOn());
		n.setProductUrl(n.getProductUrl());


		productRepository.save(n);
		return "Saved";
	}

	@GetMapping(path="/Product")
	public @ResponseBody Iterable<Product> getAllProducts() {
		// This returns a JSON or XML with the users
		return productRepository.findAll();
	}

	@PutMapping(path="/Product/{Product_id}")
	public @ResponseBody
	String updatedProduct(@PathVariable(value = "Product_id") Integer productId,
						  @RequestBody Product product) {
		productRepository.save(product);
		return "Updated";
	}
}
