package com.laribi.easycots.controllers;

import com.laribi.easycots.models.Message;
import com.laribi.easycots.repositories.MessageRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/easycots") // This means URL's start with /demo (after Application path)
public class MessageController {
	@Autowired // This means to get the bean called messageRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private MessageRepository messageRepository;

	@PostMapping(path="/Message") // Map ONLY POST Requests
	public @ResponseBody String addNewMessage (@RequestParam String messageDate
			, @RequestParam String messageFrom, @RequestParam String messageTitle, @RequestParam String messageContent) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Message n = new Message();
		n.setMessageDate(n.getMessageDate());
		n.setMessageFrom(n.getMessageFrom());
		n.setMessageTitle(n.getMessageContent());
		n.setMessageContent(n.getMessageContent());


		messageRepository.save(n);
		return "Saved";
	}

	@GetMapping(path="/Message")
	public @ResponseBody Iterable<Message> getAllMessages() {
		// This returns a JSON or XML with the users
		return messageRepository.findAll();
	}

	@PutMapping(path="/Message/{Message_id}")
	public @ResponseBody
	String updatedMessage(@PathVariable(value = "Message_id") Integer messageId,
							   @RequestBody Message message) {
		messageRepository.save(message);
		return "Updated";
	}


}
