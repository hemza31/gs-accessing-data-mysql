package com.laribi.easycots.controllers;

import com.laribi.easycots.models.ComponentStatus;
import com.laribi.easycots.models.Licence;
import com.laribi.easycots.repositories.ComponentRepository;
import com.laribi.easycots.models.Component;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/easycots") // This means URL's start with /demo (after Application path)
public class ComponentController {
	@Autowired // This means to get the bean called componentRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private ComponentRepository componentRepository;

	@PostMapping(path="/Component") // Map ONLY POST Requests
	public @ResponseBody String addNewComponent (@RequestParam String componentName
			, @RequestParam String componentDownloadUrl, @RequestParam String componentLastVersionId, @RequestParam String componentEditor, @RequestParam Licence componentCurrentLicence, @RequestParam List<ComponentStatus> componentStatus) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Component n = new Component();
		n.setComponentName(componentName);
		n.setComponentDownloadUrl(componentDownloadUrl);
		n.setComponentLastVersionId(n.getComponentLastVersionId());
		n.setComponentEditor(n.getComponentEditor());
		n.setComponentCurrentLicence(n.getComponentCurrentLicence());
		n.setComponentStatus(n.getComponentStatus());


		componentRepository.save(n);
		return "Saved";
	}

	@GetMapping(path="/Component")
	public @ResponseBody Iterable<Component> getAllComponents() {
		// This returns a JSON or XML with the users
		return componentRepository.findAll();
	}

	@PutMapping(path="/Component/{Component_id}")
	public @ResponseBody
	String updatedComponent(@PathVariable(value = "Component_id") Integer componentId,
							   @RequestBody Component component) {
		componentRepository.save(component);
		return "Updated";
	}


}
